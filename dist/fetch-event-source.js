!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports["@buletu/fetch-event-source"]=t():e["@buletu/fetch-event-source"]=t()}(self,()=>(()=>{"use strict";var e={d:(t,n)=>{for(var s in n)e.o(n,s)&&!e.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:n[s]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{FetchEventSource:()=>n});class n{constructor(e,t={}){this.url=e,this.options={method:"POST",headers:{"Content-Type":"application/json",Accept:"text/event-stream"},body:JSON.stringify({}),...t},this.eventHandlers={},this.retryInterval=t.retryInterval||3e3,this.isConnected=!1,this.controller=null,this.lastEventId=""}addEventListener(e,t){this.eventHandlers[e]||(this.eventHandlers[e]=[]),this.eventHandlers[e].push(t)}removeEventListener(e,t){this.eventHandlers[e]&&(this.eventHandlers[e]=this.eventHandlers[e].filter(e=>e!==t))}async connect(){this.controller=new AbortController;const e=this.controller.signal;try{const t=await fetch(this.url,{...this.options,signal:e});if(!t.ok||!t.body)throw new Error(`SSE连接失败: ${t.status}`);this.isConnected=!0,this.emit("open");const n=t.body.getReader(),s=new TextDecoder;let r="";for(;this.isConnected;){const{value:e,done:t}=await n.read();if(t)break;r+=s.decode(e,{stream:!0});const o=r.split(/\r\n|\n|\r/);r=o.pop()||"",o.forEach(e=>this.parseEvent(e))}}catch(e){"AbortError"!==e.name&&(this.emit("error",e),this.scheduleReconnect())}finally{this.isConnected&&(this.isConnected=!1,this.emit("close"))}}parseEvent(e){const t={type:"message",data:e,id:"",retry:""};t.data&&this.emit(t.type,t)}emit(e,t={}){this.eventHandlers[e]&&this.eventHandlers[e].forEach(e=>e(t)),"message"!==e||this.eventHandlers[e]||this.eventHandlers.message&&this.eventHandlers.message.forEach(e=>e(t))}scheduleReconnect(){setTimeout(()=>{this.isConnected||this.connect()},this.retryInterval)}close(){this.isConnected=!1,this.controller&&this.controller.abort()}}return t})());